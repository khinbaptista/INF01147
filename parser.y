%token KW_BYTE
%token KW_SHORT
%token KW_LONG
%token KW_FLOAT
%token KW_DOUBLE
%token KW_WHEN
%token KW_THEN
%token KW_ELSE
%token KW_WHILE
%token KW_FOR
%token KW_READ
%token KW_RETURN
%token KW_PRINT

%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_NE
%token OPERATOR_AND
%token OPERATOR_OR

%token TK_IDENTIFIER
%token LIT_INTEGER
%token LIT_REAL
%token LIT_CHAR
%token LIT_STRING

%token TOKEN_ERROR

%[

#include "lang171.h"	// getLineNumber()

%]

%%

TYPE:		KW_BYTE | KW_SHORT | KW_LONG | KW_FLOAT | KW_DOUBLE ;
LITERAL:	LIT_INTEGER | LIT_REAL | LIT_CHAR


GLOBAL_DECL_SET:	GLOBAL_DECL GLOBAL_DECL_SET | ;
GLOBAL_DECL:		FUNC_DECL ';' | VAR_DECL ';' ;

VAR_DECL:	TK_IDENTIFIER ':' TYPE LITERAL ';' |
		TK_IDENTIFIER ':' TYPE'[' LIT_INTEGER ']' ARRAY_INIT ';'
ARRAY_INIT:	LITERAL ARRAY_INIT | ;

FUNC_DECL:	TYPE TK_IDENTIFIER '(' ARGS_LIST ')' COMMAND ;
ARGS_LIST:	ARGS | ;
ARGS:		ARGS ',' ARG | ARG ;
ARG:		TYPE TK_IDENTIFIER ;

FUNC_CALL:	TK_IDENTIFIER '(' PARAMS_LIST ')' ;
PARAMS_LIST:	PARAMS | ;
PARAMS:		PARAMS ',' PARAM | PARAM ;
PARAM:		EXPR_ARG


COMMAND:	COMMAND_BLOCK | COMMAND_SIMPLE

COMMAND_BLOCK:	'{' COMMAND_SEQ '}'
COMMAND_SEQ:	COMMAND_SEQ COMMAND ';' | ;

COMMAND_SIMPLE:	VAR_ATTR | FLOW_CTRL | BASIC_COMMAND | ;
VAR_ATTR:	TK_IDENTIFIER '=' EXPR |
		TK_IDENTIFIER '#' EXPR '=' EXPR ;
BASIC_COMMAND:	KW_READ TK_IDENTIFIER |
		KW_PRINT PRINT_ARGS |
		KW_RETURN EXPR ;
PRINT_ARGS:	PRINT_ARG | PRINT_ARGS PRINT_ARG
PRINT_ARG:	LIT_STRING | EXPR

EXPR:		'(' EXPR ')' | EXPR_ARG EXPR_OP EXPR_ARG ;
EXPR_ARG:	TK_IDENTIFIER | FUNC_CALL | LITERAL ;
EXPR_OP:	'+' | '-' | '*' | '/' | '<' | '>' | '!' |
		OPERATOR_LE | OPERATOR_GE | OPERATOR_EQ |
		OPERATOR_NE | OPERATOR_OR | OPERATOR_AND ;

FLOW_CTRL:

%%

void yyerror(char* what) {
	fprintf(stderr, "Parser error at line %d: %s\n", getLineNumber(), what);
}
